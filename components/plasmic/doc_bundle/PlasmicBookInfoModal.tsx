// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: gV8AL87UaM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BookIconOnly from "../../BookIconOnly"; // plasmic-import: zBFHKM6h0o/component
import ColorPicker from "../../ColorPicker"; // plasmic-import: CiaLAP-GDH/component
import Switch from "../../Switch"; // plasmic-import: _WwHrFAavc_/component
import Button from "../../Button"; // plasmic-import: rxt-Sw-2gx7/component
import CloseButton from "../../CloseButton"; // plasmic-import: 8wqo5dR4Ju/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicBookInfoModal.module.css"; // plasmic-import: gV8AL87UaM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: l4LGT0VjqAm/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: _2cP8T_P8rk/icon

export type PlasmicBookInfoModal__VariantMembers = {};

export type PlasmicBookInfoModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookInfoModal__VariantsArgs;
export const PlasmicBookInfoModal__VariantProps = new Array<VariantPropType>();

export type PlasmicBookInfoModal__ArgsType = {};
type ArgPropType = keyof PlasmicBookInfoModal__ArgsType;
export const PlasmicBookInfoModal__ArgProps = new Array<ArgPropType>();

export type PlasmicBookInfoModal__OverridesType = {
  root?: p.Flex<"div">;
  bookIconOnly?: p.Flex<typeof BookIconOnly>;
  textarea?: p.Flex<"textarea">;
  colorPicker?: p.Flex<typeof ColorPicker>;
  isPriv?: p.Flex<typeof Switch>;
  ok?: p.Flex<typeof Button>;
  remove?: p.Flex<typeof Button>;
  closeButton?: p.Flex<typeof CloseButton>;
};

export interface DefaultBookInfoModalProps {
  className?: string;
}

function PlasmicBookInfoModal__RenderFunc(props: {
  variants: PlasmicBookInfoModal__VariantsArgs;
  args: PlasmicBookInfoModal__ArgsType;
  overrides: PlasmicBookInfoModal__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wvJq)}
        >
          <BookIconOnly
            data-plasmic-name={"bookIconOnly"}
            data-plasmic-override={overrides.bookIconOnly}
            className={classNames("__wab_instance", sty.bookIconOnly)}
          />

          <textarea
            data-plasmic-name={"textarea"}
            data-plasmic-override={overrides.textarea}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.textarea
            )}
            placeholder={"Input title" as const}
          />
        </p.Stack>
      ) : null}

      <ColorPicker
        data-plasmic-name={"colorPicker"}
        data-plasmic-override={overrides.colorPicker}
        className={classNames("__wab_instance", sty.colorPicker)}
        color={undefined}
      />

      <div className={classNames(projectcss.all, sty.freeBox__aScgV)}>
        <Switch
          data-plasmic-name={"isPriv"}
          data-plasmic-override={overrides.isPriv}
          className={classNames("__wab_instance", sty.isPriv)}
          defaultChecked={true}
        >
          {"Priv mode"}
        </Switch>

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bWmsX)}
          >
            <Button
              data-plasmic-name={"ok"}
              data-plasmic-override={overrides.ok}
              className={classNames("__wab_instance", sty.ok)}
              color={"softBlue" as const}
              size={"compact" as const}
            >
              {"  O     K  "}
            </Button>

            <Button
              data-plasmic-name={"remove"}
              data-plasmic-override={overrides.remove}
              className={classNames("__wab_instance", sty.remove)}
              color={"softRed" as const}
              size={"compact" as const}
            >
              {"Remove"}
            </Button>
          </p.Stack>
        ) : null}
      </div>

      <CloseButton
        data-plasmic-name={"closeButton"}
        data-plasmic-override={overrides.closeButton}
        className={classNames("__wab_instance", sty.closeButton)}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "bookIconOnly",
    "textarea",
    "colorPicker",
    "isPriv",
    "ok",
    "remove",
    "closeButton"
  ],
  bookIconOnly: ["bookIconOnly"],
  textarea: ["textarea"],
  colorPicker: ["colorPicker"],
  isPriv: ["isPriv"],
  ok: ["ok"],
  remove: ["remove"],
  closeButton: ["closeButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  bookIconOnly: typeof BookIconOnly;
  textarea: "textarea";
  colorPicker: typeof ColorPicker;
  isPriv: typeof Switch;
  ok: typeof Button;
  remove: typeof Button;
  closeButton: typeof CloseButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookInfoModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookInfoModal__VariantsArgs;
    args?: PlasmicBookInfoModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookInfoModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookInfoModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBookInfoModal__ArgProps,
      internalVariantPropNames: PlasmicBookInfoModal__VariantProps
    });

    return PlasmicBookInfoModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookInfoModal";
  } else {
    func.displayName = `PlasmicBookInfoModal.${nodeName}`;
  }
  return func;
}

export const PlasmicBookInfoModal = Object.assign(
  // Top-level PlasmicBookInfoModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    bookIconOnly: makeNodeComponent("bookIconOnly"),
    textarea: makeNodeComponent("textarea"),
    colorPicker: makeNodeComponent("colorPicker"),
    isPriv: makeNodeComponent("isPriv"),
    ok: makeNodeComponent("ok"),
    remove: makeNodeComponent("remove"),
    closeButton: makeNodeComponent("closeButton"),

    // Metadata about props expected for PlasmicBookInfoModal
    internalVariantProps: PlasmicBookInfoModal__VariantProps,
    internalArgProps: PlasmicBookInfoModal__ArgProps
  }
);

export default PlasmicBookInfoModal;
/* prettier-ignore-end */
