// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: JSMOwwEprH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { LoggedInValue, useLoggedIn } from "./PlasmicGlobalVariant__LoggedIn"; // plasmic-import: VsyhYsfbuU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicBookList.module.css"; // plasmic-import: JSMOwwEprH/css

import NoteIcon from "./icons/PlasmicIcon__Note"; // plasmic-import: _ZTB853Ot/icon

export type PlasmicBookList__VariantMembers = {};

export type PlasmicBookList__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookList__VariantsArgs;
export const PlasmicBookList__VariantProps = new Array<VariantPropType>();

export type PlasmicBookList__ArgsType = {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  list?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBookList__ArgsType;
export const PlasmicBookList__ArgProps = new Array<ArgPropType>(
  "icon",
  "title",
  "list"
);

export type PlasmicBookList__OverridesType = {
  root?: p.Flex<"div">;
  list?: p.Flex<"div">;
};

export interface DefaultBookListProps {
  icon?: React.ReactNode;
  title?: React.ReactNode;
  list?: React.ReactNode;
  className?: string;
}

function PlasmicBookList__RenderFunc(props: {
  variants: PlasmicBookList__VariantsArgs;
  args: PlasmicBookList__ArgsType;
  overrides: PlasmicBookList__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    loggedIn: useLoggedIn()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_loggedIn__true]: hasVariant(
            globalVariants,
            "loggedIn",
            "_true"
          ),
          [sty.rootglobal_loggedIn__true]: hasVariant(
            globalVariants,
            "loggedIn",
            "_true"
          )
        }
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__uCaXn)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <NoteIcon
              className={classNames(projectcss.all, sty.svg__vaUm)}
              role={"img"}
            />
          ),

          value: args.icon
        })}

        <div
          className={classNames(projectcss.all, sty.freeBox__vCqA1, {
            [sty.freeBoxglobal_loggedIn__true__vCqA1TQxEk]: hasVariant(
              globalVariants,
              "loggedIn",
              "_true"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "すべてのブック",
            value: args.title,
            className: classNames(sty.slotTargetTitle, {
              [sty.slotTargetTitleglobal_loggedIn__true]: hasVariant(
                globalVariants,
                "loggedIn",
                "_true"
              )
            })
          })}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"list"}
        data-plasmic-override={overrides.list}
        hasGap={true}
        className={classNames(projectcss.all, sty.list, {
          [sty.listglobal_loggedIn__true]: hasVariant(
            globalVariants,
            "loggedIn",
            "_true"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.list
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "list"],
  list: ["list"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  list: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookList__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookList__VariantsArgs;
    args?: PlasmicBookList__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookList__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookList__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBookList__ArgProps,
      internalVariantPropNames: PlasmicBookList__VariantProps
    });

    return PlasmicBookList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookList";
  } else {
    func.displayName = `PlasmicBookList.${nodeName}`;
  }
  return func;
}

export const PlasmicBookList = Object.assign(
  // Top-level PlasmicBookList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    list: makeNodeComponent("list"),

    // Metadata about props expected for PlasmicBookList
    internalVariantProps: PlasmicBookList__VariantProps,
    internalArgProps: PlasmicBookList__ArgProps
  }
);

export default PlasmicBookList;
/* prettier-ignore-end */
