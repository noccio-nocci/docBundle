// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: L26Nao6P2lck
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LoginWithGoogle from "../../LoginWithGoogle"; // plasmic-import: lyekaetmXI/component
import SideBarLogo from "../../SideBarLogo"; // plasmic-import: QxLaN1qoTo/component
import AddStock from "../../AddStock"; // plasmic-import: -k3H9wKgmJ/component
import SideBarLogout from "../../SideBarLogout"; // plasmic-import: 1WJG8XuDtI/component
import BookList from "../../BookList"; // plasmic-import: JSMOwwEprH/component
import AddBook from "../../AddBook"; // plasmic-import: OGD7Ufmsky/component
import DocumentFrame from "../../DocumentFrame"; // plasmic-import: CWMxFnAAun/component

import { LoggedInValue, useLoggedIn } from "./PlasmicGlobalVariant__LoggedIn"; // plasmic-import: VsyhYsfbuU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: L26Nao6P2lck/css

import StarIcon from "./icons/PlasmicIcon__Star"; // plasmic-import: K0O_HVvPM/icon
import MyBookIcon from "./icons/PlasmicIcon__MyBook"; // plasmic-import: R2OFeL2RR/icon
import BookshelfIcon from "./icons/PlasmicIcon__Bookshelf"; // plasmic-import: FQZ240wht/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  loginWithGoogle?: p.Flex<typeof LoginWithGoogle>;
  sideBarLogo?: p.Flex<typeof SideBarLogo>;
  bundleList?: p.Flex<"div">;
  addStock?: p.Flex<typeof AddStock>;
  sideBarLogout?: p.Flex<typeof SideBarLogout>;
  stackerList?: p.Flex<"div">;
  addBook?: p.Flex<typeof AddBook>;
  text?: p.Flex<"div">;
  documentFrame?: p.Flex<typeof DocumentFrame>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    loggedIn: useLoggedIn()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_loggedIn__true]: hasVariant(
                globalVariants,
                "loggedIn",
                "_true"
              ),
              [sty.rootglobal_loggedIn__true]: hasVariant(
                globalVariants,
                "loggedIn",
                "_true"
              )
            }
          )}
        >
          {(hasVariant(globalVariants, "loggedIn", "_true") ? true : true) ? (
            <LoginWithGoogle
              data-plasmic-name={"loginWithGoogle"}
              data-plasmic-override={overrides.loginWithGoogle}
              className={classNames("__wab_instance", sty.loginWithGoogle, {
                [sty.loginWithGoogleglobal_loggedIn__true]: hasVariant(
                  globalVariants,
                  "loggedIn",
                  "_true"
                )
              })}
            />
          ) : null}
          {(hasVariant(globalVariants, "loggedIn", "_true") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___2Nyxn, {
                [sty.freeBoxglobal_loggedIn__true___2NyxntQxEk]: hasVariant(
                  globalVariants,
                  "loggedIn",
                  "_true"
                )
              })}
            >
              {(
                hasVariant(globalVariants, "loggedIn", "_true") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox__liMl0, {
                    [sty.freeBoxglobal_loggedIn__true__liMl0TQxEk]: hasVariant(
                      globalVariants,
                      "loggedIn",
                      "_true"
                    )
                  })}
                >
                  <SideBarLogo
                    data-plasmic-name={"sideBarLogo"}
                    data-plasmic-override={overrides.sideBarLogo}
                    className={classNames("__wab_instance", sty.sideBarLogo, {
                      [sty.sideBarLogoglobal_loggedIn__true]: hasVariant(
                        globalVariants,
                        "loggedIn",
                        "_true"
                      )
                    })}
                  />

                  {(
                    hasVariant(globalVariants, "loggedIn", "_true")
                      ? true
                      : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"bundleList"}
                      data-plasmic-override={overrides.bundleList}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.bundleList, {
                        [sty.bundleListglobal_loggedIn__true]: hasVariant(
                          globalVariants,
                          "loggedIn",
                          "_true"
                        )
                      })}
                    >
                      <AddStock
                        data-plasmic-name={"addStock"}
                        data-plasmic-override={overrides.addStock}
                        className={classNames("__wab_instance", sty.addStock, {
                          [sty.addStockglobal_loggedIn__true]: hasVariant(
                            globalVariants,
                            "loggedIn",
                            "_true"
                          )
                        })}
                      />
                    </p.Stack>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "loggedIn", "_true")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___1AlMz,
                        {
                          [sty.freeBoxglobal_loggedIn__true___1AlMztQxEk]:
                            hasVariant(globalVariants, "loggedIn", "_true")
                        }
                      )}
                    >
                      <SideBarLogout
                        data-plasmic-name={"sideBarLogout"}
                        data-plasmic-override={overrides.sideBarLogout}
                        className={classNames(
                          "__wab_instance",
                          sty.sideBarLogout,
                          {
                            [sty.sideBarLogoutglobal_loggedIn__true]:
                              hasVariant(globalVariants, "loggedIn", "_true")
                          }
                        )}
                      />
                    </div>
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "loggedIn", "_true") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"stackerList"}
                  data-plasmic-override={overrides.stackerList}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.stackerList, {
                    [sty.stackerListglobal_loggedIn__true]: hasVariant(
                      globalVariants,
                      "loggedIn",
                      "_true"
                    )
                  })}
                >
                  <BookList
                    className={classNames(
                      "__wab_instance",
                      sty.bookList___6KS3,
                      {
                        [sty.bookListglobal_loggedIn__true___6KS3TQxEk]:
                          hasVariant(globalVariants, "loggedIn", "_true")
                      }
                    )}
                    icon={
                      <StarIcon
                        className={classNames(projectcss.all, sty.svg__f21T)}
                        role={"img"}
                      />
                    }
                    title={"スター付き"}
                  />

                  <BookList
                    className={classNames("__wab_instance", sty.bookList__tEi, {
                      [sty.bookListglobal_loggedIn__true__tEItQxEk]: hasVariant(
                        globalVariants,
                        "loggedIn",
                        "_true"
                      )
                    })}
                    icon={
                      <MyBookIcon
                        className={classNames(projectcss.all, sty.svg__frQy8)}
                        role={"img"}
                      />
                    }
                    list={
                      <AddBook
                        data-plasmic-name={"addBook"}
                        data-plasmic-override={overrides.addBook}
                        className={classNames("__wab_instance", sty.addBook, {
                          [sty.addBookglobal_loggedIn__true]: hasVariant(
                            globalVariants,
                            "loggedIn",
                            "_true"
                          )
                        })}
                      />
                    }
                    title={"自分のバンドル"}
                  />

                  <BookList
                    className={classNames(
                      "__wab_instance",
                      sty.bookList__vMVpS,
                      {
                        [sty.bookListglobal_loggedIn__true__vMVpStQxEk]:
                          hasVariant(globalVariants, "loggedIn", "_true")
                      }
                    )}
                    icon={
                      <BookshelfIcon
                        className={classNames(projectcss.all, sty.svg__wPTaP)}
                        role={"img"}
                      />
                    }
                    title={
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"すべてのバンドル"}
                      </div>
                    }
                  />
                </p.Stack>
              ) : null}
              {(
                hasVariant(globalVariants, "loggedIn", "_true") ? true : true
              ) ? (
                <DocumentFrame
                  data-plasmic-name={"documentFrame"}
                  data-plasmic-override={overrides.documentFrame}
                  className={classNames("__wab_instance", sty.documentFrame, {
                    [sty.documentFrameglobal_loggedIn__true]: hasVariant(
                      globalVariants,
                      "loggedIn",
                      "_true"
                    )
                  })}
                />
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginWithGoogle",
    "sideBarLogo",
    "bundleList",
    "addStock",
    "sideBarLogout",
    "stackerList",
    "addBook",
    "text",
    "documentFrame"
  ],
  loginWithGoogle: ["loginWithGoogle"],
  sideBarLogo: ["sideBarLogo"],
  bundleList: ["bundleList", "addStock"],
  addStock: ["addStock"],
  sideBarLogout: ["sideBarLogout"],
  stackerList: ["stackerList", "addBook", "text"],
  addBook: ["addBook"],
  text: ["text"],
  documentFrame: ["documentFrame"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginWithGoogle: typeof LoginWithGoogle;
  sideBarLogo: typeof SideBarLogo;
  bundleList: "div";
  addStock: typeof AddStock;
  sideBarLogout: typeof SideBarLogout;
  stackerList: "div";
  addBook: typeof AddBook;
  text: "div";
  documentFrame: typeof DocumentFrame;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginWithGoogle: makeNodeComponent("loginWithGoogle"),
    sideBarLogo: makeNodeComponent("sideBarLogo"),
    bundleList: makeNodeComponent("bundleList"),
    addStock: makeNodeComponent("addStock"),
    sideBarLogout: makeNodeComponent("sideBarLogout"),
    stackerList: makeNodeComponent("stackerList"),
    addBook: makeNodeComponent("addBook"),
    text: makeNodeComponent("text"),
    documentFrame: makeNodeComponent("documentFrame"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
