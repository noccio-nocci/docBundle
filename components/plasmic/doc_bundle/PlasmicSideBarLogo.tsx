// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: QxLaN1qoTo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { LoggedInValue, useLoggedIn } from "./PlasmicGlobalVariant__LoggedIn"; // plasmic-import: VsyhYsfbuU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicSideBarLogo.module.css"; // plasmic-import: QxLaN1qoTo/css

export type PlasmicSideBarLogo__VariantMembers = {};

export type PlasmicSideBarLogo__VariantsArgs = {};
type VariantPropType = keyof PlasmicSideBarLogo__VariantsArgs;
export const PlasmicSideBarLogo__VariantProps = new Array<VariantPropType>();

export type PlasmicSideBarLogo__ArgsType = {};
type ArgPropType = keyof PlasmicSideBarLogo__ArgsType;
export const PlasmicSideBarLogo__ArgProps = new Array<ArgPropType>();

export type PlasmicSideBarLogo__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  text?: p.Flex<"div">;
};

export interface DefaultSideBarLogoProps {
  className?: string;
}

function PlasmicSideBarLogo__RenderFunc(props: {
  variants: PlasmicSideBarLogo__VariantsArgs;
  args: PlasmicSideBarLogo__ArgsType;
  overrides: PlasmicSideBarLogo__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    loggedIn: useLoggedIn()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [sty.rootglobal_loggedIn__true]: hasVariant(
              globalVariants,
              "loggedIn",
              "_true"
            )
          }
        )}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgglobal_loggedIn__true]: hasVariant(
              globalVariants,
              "loggedIn",
              "_true"
            )
          })}
          displayHeight={
            hasVariant(globalVariants, "loggedIn", "_true")
              ? ("32px" as const)
              : ("24px" as const)
          }
          displayMaxHeight={"none" as const}
          displayMaxWidth={"100%" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={
            hasVariant(globalVariants, "loggedIn", "_true")
              ? ("32px" as const)
              : ("24px" as const)
          }
          loading={"lazy" as const}
          src={{
            src: "/plasmic/doc_bundle/images/scrapDocs.svg",
            fullWidth: 150,
            fullHeight: 150,
            aspectRatio: 1
          }}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textglobal_loggedIn__true]: hasVariant(
                globalVariants,
                "loggedIn",
                "_true"
              )
            }
          )}
        >
          {hasVariant(globalVariants, "loggedIn", "_true")
            ? "docBundle"
            : "DocStack"}
        </div>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "text"],
  img: ["img"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSideBarLogo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSideBarLogo__VariantsArgs;
    args?: PlasmicSideBarLogo__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSideBarLogo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSideBarLogo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideBarLogo__ArgProps,
      internalVariantPropNames: PlasmicSideBarLogo__VariantProps
    });

    return PlasmicSideBarLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideBarLogo";
  } else {
    func.displayName = `PlasmicSideBarLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicSideBarLogo = Object.assign(
  // Top-level PlasmicSideBarLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSideBarLogo
    internalVariantProps: PlasmicSideBarLogo__VariantProps,
    internalArgProps: PlasmicSideBarLogo__ArgProps
  }
);

export default PlasmicSideBarLogo;
/* prettier-ignore-end */
