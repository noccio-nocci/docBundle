// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: NlJImffK0e
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Logo from "../../Logo"; // plasmic-import: JICtSQ_fSV/component
import Button from "../../Button"; // plasmic-import: rxt-Sw-2gx7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicSigninForm2.module.css"; // plasmic-import: NlJImffK0e/css

import GoogleLogoIcon from "./icons/PlasmicIcon__GoogleLogo"; // plasmic-import: XhhsX1TD8/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: _2cP8T_P8rk/icon

export type PlasmicSigninForm2__VariantMembers = {};

export type PlasmicSigninForm2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSigninForm2__VariantsArgs;
export const PlasmicSigninForm2__VariantProps = new Array<VariantPropType>();

export type PlasmicSigninForm2__ArgsType = {};
type ArgPropType = keyof PlasmicSigninForm2__ArgsType;
export const PlasmicSigninForm2__ArgProps = new Array<ArgPropType>();

export type PlasmicSigninForm2__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  logo?: p.Flex<typeof Logo>;
  signinWithGoogleButton?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
};

export interface DefaultSigninForm2Props {
  className?: string;
}

function PlasmicSigninForm2__RenderFunc(props: {
  variants: PlasmicSigninForm2__VariantsArgs;
  args: PlasmicSigninForm2__ArgsType;
  overrides: PlasmicSigninForm2__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {true ? (
              <Logo
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames("__wab_instance", sty.logo)}
              />
            ) : null}
            {true ? (
              <Button
                data-plasmic-name={"signinWithGoogleButton"}
                data-plasmic-override={overrides.signinWithGoogleButton}
                className={classNames(
                  "__wab_instance",
                  sty.signinWithGoogleButton
                )}
                color={"white" as const}
                showStartIcon={true}
                startIcon={
                  <GoogleLogoIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                }
              >
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {"Login with Google"}
                </div>
              </Button>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "logo", "signinWithGoogleButton", "svg", "text"],
  freeBox: ["freeBox", "logo", "signinWithGoogleButton", "svg", "text"],
  logo: ["logo"],
  signinWithGoogleButton: ["signinWithGoogleButton", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  logo: typeof Logo;
  signinWithGoogleButton: typeof Button;
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSigninForm2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSigninForm2__VariantsArgs;
    args?: PlasmicSigninForm2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSigninForm2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSigninForm2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSigninForm2__ArgProps,
      internalVariantPropNames: PlasmicSigninForm2__VariantProps
    });

    return PlasmicSigninForm2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSigninForm2";
  } else {
    func.displayName = `PlasmicSigninForm2.${nodeName}`;
  }
  return func;
}

export const PlasmicSigninForm2 = Object.assign(
  // Top-level PlasmicSigninForm2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    logo: makeNodeComponent("logo"),
    signinWithGoogleButton: makeNodeComponent("signinWithGoogleButton"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSigninForm2
    internalVariantProps: PlasmicSigninForm2__VariantProps,
    internalArgProps: PlasmicSigninForm2__ArgProps
  }
);

export default PlasmicSigninForm2;
/* prettier-ignore-end */
