// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: qSNyjdcQiS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicBook.module.css"; // plasmic-import: qSNyjdcQiS/css

import LockedIcon from "./icons/PlasmicIcon__Locked"; // plasmic-import: oiNr7JnGp/icon
import FolderIcon from "./icons/PlasmicIcon__Folder"; // plasmic-import: BYuADTFPQ/icon

export type PlasmicBook__VariantMembers = {
  locked: "locked";
  color: "_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7";
};

export type PlasmicBook__VariantsArgs = {
  locked?: SingleBooleanChoiceArg<"locked">;
  color?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7">;
};

type VariantPropType = keyof PlasmicBook__VariantsArgs;
export const PlasmicBook__VariantProps = new Array<VariantPropType>(
  "locked",
  "color"
);

export type PlasmicBook__ArgsType = {
  title?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBook__ArgsType;
export const PlasmicBook__ArgProps = new Array<ArgPropType>("title");

export type PlasmicBook__OverridesType = {
  root?: p.Flex<"button">;
};

export interface DefaultBookProps {
  title?: React.ReactNode;
  locked?: SingleBooleanChoiceArg<"locked">;
  color?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7">;
  className?: string;
}

function PlasmicBook__RenderFunc(props: {
  variants: PlasmicBook__VariantsArgs;
  args: PlasmicBook__ArgsType;
  overrides: PlasmicBook__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootlocked]: hasVariant(variants, "locked", "locked") }
      )}
    >
      {(hasVariant(variants, "locked", "locked") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__fqRMe, {
            [sty.freeBoxlocked__fqRMek7L1V]: hasVariant(
              variants,
              "locked",
              "locked"
            )
          })}
        >
          <LockedIcon
            className={classNames(projectcss.all, sty.svg__rZEaj)}
            role={"img"}
          />
        </div>
      ) : null}

      <FolderIcon
        className={classNames(projectcss.all, sty.svg___0Znkj, {
          [sty.svgcolor__2___0ZnkJfqH7Y]: hasVariant(variants, "color", "_2"),
          [sty.svgcolor__3___0ZnkJcoWHj]: hasVariant(variants, "color", "_3"),
          [sty.svgcolor__4___0Znkjee4Cp]: hasVariant(variants, "color", "_4"),
          [sty.svgcolor__5___0ZnkjpATr]: hasVariant(variants, "color", "_5"),
          [sty.svgcolor__6___0ZnkjWmOj]: hasVariant(variants, "color", "_6"),
          [sty.svgcolor__7___0ZnkjiqpIq]: hasVariant(variants, "color", "_7")
        })}
        role={"img"}
      />

      <div className={classNames(projectcss.all, sty.freeBox__qAn4H)}>
        {p.renderPlasmicSlot({
          defaultContents: "",
          value: args.title
        })}
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBook__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBook__VariantsArgs;
    args?: PlasmicBook__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBook__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBook__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBook__ArgProps,
      internalVariantPropNames: PlasmicBook__VariantProps
    });

    return PlasmicBook__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBook";
  } else {
    func.displayName = `PlasmicBook.${nodeName}`;
  }
  return func;
}

export const PlasmicBook = Object.assign(
  // Top-level PlasmicBook renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBook
    internalVariantProps: PlasmicBook__VariantProps,
    internalArgProps: PlasmicBook__ArgProps
  }
);

export default PlasmicBook;
/* prettier-ignore-end */
