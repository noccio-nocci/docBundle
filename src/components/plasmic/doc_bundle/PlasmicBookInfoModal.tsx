// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: gV8AL87UaM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import BookIconOnly from "../../BookIconOnly"; // plasmic-import: zBFHKM6h0o/component
import ColorPicker from "../../ColorPicker"; // plasmic-import: CiaLAP-GDH/component
import Switch from "../../Switch"; // plasmic-import: _WwHrFAavc_/component
import Button from "../../Button"; // plasmic-import: rxt-Sw-2gx7/component
import CloseButton from "../../CloseButton"; // plasmic-import: 8wqo5dR4Ju/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicBookInfoModal.module.css"; // plasmic-import: gV8AL87UaM/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: l4LGT0VjqAm/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: _2cP8T_P8rk/icon

export type PlasmicBookInfoModal__VariantMembers = {};

export type PlasmicBookInfoModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicBookInfoModal__VariantsArgs;
export const PlasmicBookInfoModal__VariantProps = new Array<VariantPropType>();

export type PlasmicBookInfoModal__ArgsType = {
  closeButton?: React.ReactNode;
  textarea?: React.ReactNode;
  colorPicker?: React.ReactNode;
  bookIconOnly?: React.ReactNode;
  isPriv?: React.ReactNode;
  remove?: React.ReactNode;
  ok?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBookInfoModal__ArgsType;
export const PlasmicBookInfoModal__ArgProps = new Array<ArgPropType>(
  "closeButton",
  "textarea",
  "colorPicker",
  "bookIconOnly",
  "isPriv",
  "remove",
  "ok"
);

export type PlasmicBookInfoModal__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultBookInfoModalProps {
  closeButton?: React.ReactNode;
  textarea?: React.ReactNode;
  colorPicker?: React.ReactNode;
  bookIconOnly?: React.ReactNode;
  isPriv?: React.ReactNode;
  remove?: React.ReactNode;
  ok?: React.ReactNode;
  className?: string;
}

function PlasmicBookInfoModal__RenderFunc(props: {
  variants: PlasmicBookInfoModal__VariantsArgs;
  args: PlasmicBookInfoModal__ArgsType;
  overrides: PlasmicBookInfoModal__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__wvJq)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <BookIconOnly
                className={classNames(
                  "__wab_instance",
                  sty.bookIconOnly__z13OQ
                )}
              />
            ),

            value: args.bookIconOnly
          })}

          <div className={classNames(projectcss.all, sty.freeBox__qw9D)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <textarea
                  className={classNames(
                    projectcss.all,
                    projectcss.textarea,
                    sty.textarea__haLsB
                  )}
                  placeholder={"Input title" as const}
                />
              ),

              value: args.textarea
            })}
          </div>
        </p.Stack>
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: (
          <ColorPicker
            className={classNames("__wab_instance", sty.colorPicker__p3Bba)}
            color={undefined}
          />
        ),

        value: args.colorPicker
      })}

      <div className={classNames(projectcss.all, sty.freeBox__aScgV)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Switch
              className={classNames("__wab_instance", sty._switch__hHhi)}
              defaultChecked={true}
            >
              {"Priv mode"}
            </Switch>
          ),

          value: args.isPriv
        })}

        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__bWmsX)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__fnTvM)}
                  color={"softBlue" as const}
                  size={"compact" as const}
                >
                  {"  O     K  "}
                </Button>
              ),

              value: args.ok
            })}

            {p.renderPlasmicSlot({
              defaultContents: (
                <Button
                  className={classNames("__wab_instance", sty.button__zutPe)}
                  color={"softRed" as const}
                  size={"compact" as const}
                >
                  {"Remove"}
                </Button>
              ),

              value: args.remove
            })}
          </p.Stack>
        ) : null}
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__iyyig)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <CloseButton
              className={classNames("__wab_instance", sty.closeButton__zN4F)}
            />
          ),

          value: args.closeButton
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBookInfoModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBookInfoModal__VariantsArgs;
    args?: PlasmicBookInfoModal__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBookInfoModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBookInfoModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBookInfoModal__ArgProps,
      internalVariantPropNames: PlasmicBookInfoModal__VariantProps
    });

    return PlasmicBookInfoModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBookInfoModal";
  } else {
    func.displayName = `PlasmicBookInfoModal.${nodeName}`;
  }
  return func;
}

export const PlasmicBookInfoModal = Object.assign(
  // Top-level PlasmicBookInfoModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicBookInfoModal
    internalVariantProps: PlasmicBookInfoModal__VariantProps,
    internalArgProps: PlasmicBookInfoModal__ArgProps
  }
);

export default PlasmicBookInfoModal;
/* prettier-ignore-end */
