// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: xjiy3g2Skn
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SectionToggle from "../../SectionToggle"; // plasmic-import: okur83wpGri/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicDocumentSection.module.css"; // plasmic-import: xjiy3g2Skn/css

export type PlasmicDocumentSection__VariantMembers = {
  isClose: "isClose";
  color: "_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7";
};

export type PlasmicDocumentSection__VariantsArgs = {
  isClose?: SingleBooleanChoiceArg<"isClose">;
  color?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7">;
};

type VariantPropType = keyof PlasmicDocumentSection__VariantsArgs;
export const PlasmicDocumentSection__VariantProps = new Array<VariantPropType>(
  "isClose",
  "color"
);

export type PlasmicDocumentSection__ArgsType = {
  list?: React.ReactNode;
  name?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDocumentSection__ArgsType;
export const PlasmicDocumentSection__ArgProps = new Array<ArgPropType>(
  "list",
  "name"
);

export type PlasmicDocumentSection__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  name?: p.Flex<"div">;
  toggle?: p.Flex<typeof SectionToggle>;
  childSection?: p.Flex<"div">;
};

export interface DefaultDocumentSectionProps {
  list?: React.ReactNode;
  name?: React.ReactNode;
  isClose?: SingleBooleanChoiceArg<"isClose">;
  color?: SingleChoiceArg<"_1" | "_2" | "_3" | "_4" | "_5" | "_6" | "_7">;
  className?: string;
}

function PlasmicDocumentSection__RenderFunc(props: {
  variants: PlasmicDocumentSection__VariantsArgs;
  args: PlasmicDocumentSection__ArgsType;
  overrides: PlasmicDocumentSection__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootisClose]: hasVariant(variants, "isClose", "isClose") }
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section, {
            [sty.sectioncolor__2]: hasVariant(variants, "color", "_2"),
            [sty.sectioncolor__3]: hasVariant(variants, "color", "_3"),
            [sty.sectioncolor__4]: hasVariant(variants, "color", "_4"),
            [sty.sectioncolor__5]: hasVariant(variants, "color", "_5"),
            [sty.sectioncolor__6]: hasVariant(variants, "color", "_6"),
            [sty.sectioncolor__7]: hasVariant(variants, "color", "_7")
          })}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxcolor__6]: hasVariant(variants, "color", "_6"),
              [sty.freeBoxisClose]: hasVariant(variants, "isClose", "isClose")
            })}
          >
            <div
              data-plasmic-name={"name"}
              data-plasmic-override={overrides.name}
              className={classNames(projectcss.all, sty.name, {
                [sty.namecolor__2]: hasVariant(variants, "color", "_2"),
                [sty.nameisClose]: hasVariant(variants, "isClose", "isClose")
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Section Title",
                value: args.name,
                className: classNames(sty.slotTargetName, {
                  [sty.slotTargetNamecolor__2]: hasVariant(
                    variants,
                    "color",
                    "_2"
                  ),
                  [sty.slotTargetNameisClose]: hasVariant(
                    variants,
                    "isClose",
                    "isClose"
                  )
                })
              })}
            </div>

            {true ? (
              <SectionToggle
                data-plasmic-name={"toggle"}
                data-plasmic-override={overrides.toggle}
                className={classNames("__wab_instance", sty.toggle, {
                  [sty.toggleisClose]: hasVariant(
                    variants,
                    "isClose",
                    "isClose"
                  )
                })}
                isClose={
                  hasVariant(variants, "isClose", "isClose") ? true : undefined
                }
              />
            ) : null}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"childSection"}
        data-plasmic-override={overrides.childSection}
        hasGap={true}
        className={classNames(projectcss.all, sty.childSection, {
          [sty.childSectionisClose]: hasVariant(variants, "isClose", "isClose")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.list
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "freeBox", "name", "toggle", "childSection"],
  section: ["section", "freeBox", "name", "toggle"],
  freeBox: ["freeBox", "name", "toggle"],
  name: ["name"],
  toggle: ["toggle"],
  childSection: ["childSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "div";
  freeBox: "div";
  name: "div";
  toggle: typeof SectionToggle;
  childSection: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDocumentSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDocumentSection__VariantsArgs;
    args?: PlasmicDocumentSection__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDocumentSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDocumentSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDocumentSection__ArgProps,
      internalVariantPropNames: PlasmicDocumentSection__VariantProps
    });

    return PlasmicDocumentSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDocumentSection";
  } else {
    func.displayName = `PlasmicDocumentSection.${nodeName}`;
  }
  return func;
}

export const PlasmicDocumentSection = Object.assign(
  // Top-level PlasmicDocumentSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    _name: makeNodeComponent("name"),
    toggle: makeNodeComponent("toggle"),
    childSection: makeNodeComponent("childSection"),

    // Metadata about props expected for PlasmicDocumentSection
    internalVariantProps: PlasmicDocumentSection__VariantProps,
    internalArgProps: PlasmicDocumentSection__ArgProps
  }
);

export default PlasmicDocumentSection;
/* prettier-ignore-end */
