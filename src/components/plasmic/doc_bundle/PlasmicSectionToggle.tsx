// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jRkyHyW5xUgunu5SjYQV4L
// Component: okur83wpGri
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_doc_bundle.module.css"; // plasmic-import: jRkyHyW5xUgunu5SjYQV4L/projectcss
import sty from "./PlasmicSectionToggle.module.css"; // plasmic-import: okur83wpGri/css

import SectionFlapIcon from "./icons/PlasmicIcon__SectionFlap"; // plasmic-import: U1mSvVSj2/icon

export type PlasmicSectionToggle__VariantMembers = {
  isClose: "isClose";
};

export type PlasmicSectionToggle__VariantsArgs = {
  isClose?: SingleBooleanChoiceArg<"isClose">;
};

type VariantPropType = keyof PlasmicSectionToggle__VariantsArgs;
export const PlasmicSectionToggle__VariantProps = new Array<VariantPropType>(
  "isClose"
);

export type PlasmicSectionToggle__ArgsType = {};
type ArgPropType = keyof PlasmicSectionToggle__ArgsType;
export const PlasmicSectionToggle__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionToggle__OverridesType = {
  root?: p.Flex<"button">;
  sectionToggle?: p.Flex<"svg">;
};

export interface DefaultSectionToggleProps {
  isClose?: SingleBooleanChoiceArg<"isClose">;
  className?: string;
}

function PlasmicSectionToggle__RenderFunc(props: {
  variants: PlasmicSectionToggle__VariantsArgs;
  args: PlasmicSectionToggle__ArgsType;
  overrides: PlasmicSectionToggle__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <button
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.button,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <SectionFlapIcon
          data-plasmic-name={"sectionToggle"}
          data-plasmic-override={overrides.sectionToggle}
          className={classNames(projectcss.all, sty.sectionToggle, {
            [sty.sectionToggleisClose]: hasVariant(
              variants,
              "isClose",
              "isClose"
            )
          })}
          role={"img"}
        />
      </button>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "sectionToggle"],
  sectionToggle: ["sectionToggle"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  sectionToggle: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionToggle__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionToggle__VariantsArgs;
    args?: PlasmicSectionToggle__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSectionToggle__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionToggle__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionToggle__ArgProps,
      internalVariantPropNames: PlasmicSectionToggle__VariantProps
    });

    return PlasmicSectionToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionToggle";
  } else {
    func.displayName = `PlasmicSectionToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionToggle = Object.assign(
  // Top-level PlasmicSectionToggle renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionToggle: makeNodeComponent("sectionToggle"),

    // Metadata about props expected for PlasmicSectionToggle
    internalVariantProps: PlasmicSectionToggle__VariantProps,
    internalArgProps: PlasmicSectionToggle__ArgProps
  }
);

export default PlasmicSectionToggle;
/* prettier-ignore-end */
